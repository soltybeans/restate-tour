import { WrappedPromise } from "./utils/promises";
export declare enum PromiseType {
    JournalEntry = 0
}
export interface PromiseId {
    type: PromiseType;
    id: number;
}
export declare function newJournalEntryPromiseId(entryIndex: number): PromiseId;
/**
 * This class takes care of creating and managing deterministic promise combinators.
 *
 * It should be wired up to the journal/state machine methods to read and write entries.
 */
export declare class PromiseCombinatorTracker {
    private readonly readReplayOrder;
    private readonly onWriteCombinatorOrder;
    private nextCombinatorIndex;
    private pendingCombinators;
    constructor(readReplayOrder: (combinatorIndex: number) => PromiseId[] | undefined, onWriteCombinatorOrder: (combinatorIndex: number, order: PromiseId[]) => Promise<void>);
    createCombinator(combinatorConstructor: (promises: PromiseLike<unknown>[]) => Promise<unknown>, promises: Array<{
        id: PromiseId;
        promise: Promise<unknown>;
    }>): WrappedPromise<unknown>;
    private appendOrder;
    private onCombinatorReplayed;
    private onCombinatorResolved;
}
//# sourceMappingURL=promise_combinator_tracker.d.ts.map