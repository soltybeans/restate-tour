/// <reference types="node" />
import { RestateEndpoint, ServiceBundle } from "../public_api";
import type { ServiceDefinition, VirtualObjectDefinition } from "@restatedev/restate-sdk-core";
import { Http2ServerRequest, Http2ServerResponse } from "http2";
import { Component } from "../types/components";
import * as discovery from "../types/discovery";
import { KeySetV1 } from "./request_signing/v1";
import { WorkflowDefinition } from "@restatedev/restate-sdk-core";
export declare const endpointImpl: () => RestateEndpoint;
export declare class EndpointImpl implements RestateEndpoint {
    private readonly services;
    private _keySet?;
    get keySet(): KeySetV1 | undefined;
    componentByName(componentName: string): Component | undefined;
    addComponent(component: Component): void;
    bindBundle(services: ServiceBundle): RestateEndpoint;
    bind<P extends string, M>(definition: ServiceDefinition<P, M> | VirtualObjectDefinition<P, M> | WorkflowDefinition<P, M>): RestateEndpoint;
    withIdentityV1(...keys: string[]): RestateEndpoint;
    http2Handler(): (request: Http2ServerRequest, response: Http2ServerResponse) => void;
    lambdaHandler(): (event: any, ctx: any) => Promise<any>;
    listen(port?: number): Promise<number>;
    computeDiscovery(protocolMode: discovery.ProtocolMode): discovery.Endpoint;
    private bindServiceComponent;
    private bindVirtualObjectComponent;
    private bindWorkflowObjectComponent;
}
//# sourceMappingURL=endpoint_impl.d.ts.map