"use strict";
/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.importKey = void 0;
const node_crypto_1 = require("node:crypto");
const crypto = __importStar(require("node:crypto"));
const USE_WEB_CRYPTO = globalThis.process?.env?.USE_WEB_CRYPTO == "true" ||
    globalThis.process?.release?.name !== "node";
function importKey(kid, derBytes) {
    if (!USE_WEB_CRYPTO) {
        return {
            type: "node",
            key: crypto.createPublicKey({
                key: derBytes,
                format: "der",
                type: "spki",
            }),
            kid,
        };
    }
    else {
        return {
            type: "web",
            key: node_crypto_1.webcrypto.subtle.importKey("spki", derBytes, { name: "Ed25519" }, false, ["verify"]),
            kid,
        };
    }
}
exports.importKey = importKey;
async function verify(key, signatureBuf, data) {
    if (key.type == "node") {
        return crypto.verify(null, data, key.key, signatureBuf);
    }
    else {
        let webKey;
        try {
            webKey = await key.key;
        }
        catch (e) {
            throw new Error(`key ${key.kid} failed to parse on startup, this will affect all requests signed with it: ${e}`);
        }
        return await node_crypto_1.webcrypto.subtle.verify({ name: "Ed25519" }, webKey, signatureBuf, data);
    }
}
exports.verify = verify;
//# sourceMappingURL=ed25519.js.map