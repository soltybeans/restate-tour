"use strict";
/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorToErrorMessage = exports.failureToError = exports.failureToTerminalError = exports.errorToFailure = exports.RetryableError = exports.TimeoutError = exports.TerminalError = exports.RestateError = exports.ensureError = exports.RestateErrorCodes = exports.UNKNOWN_ERROR_CODE = exports.TIMEOUT_ERROR_CODE = exports.INTERNAL_ERROR_CODE = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const protocol_pb_1 = require("../generated/proto/protocol_pb");
const utils_1 = require("../utils/utils");
exports.INTERNAL_ERROR_CODE = 500;
exports.TIMEOUT_ERROR_CODE = 408;
exports.UNKNOWN_ERROR_CODE = 500;
var RestateErrorCodes;
(function (RestateErrorCodes) {
    RestateErrorCodes[RestateErrorCodes["JOURNAL_MISMATCH"] = 570] = "JOURNAL_MISMATCH";
    RestateErrorCodes[RestateErrorCodes["PROTOCOL_VIOLATION"] = 571] = "PROTOCOL_VIOLATION";
})(RestateErrorCodes = exports.RestateErrorCodes || (exports.RestateErrorCodes = {}));
function ensureError(e) {
    if (e instanceof Error) {
        return e;
    }
    let msg;
    try {
        msg = JSON.stringify(e);
    }
    catch (x) {
        msg = "(no JSON representation)";
    }
    return new Error("Non-Error value: " + msg);
}
exports.ensureError = ensureError;
class RestateError extends Error {
    code;
    constructor(message, options) {
        super(message, { cause: options?.cause });
        this.code = options?.errorCode ?? exports.INTERNAL_ERROR_CODE;
    }
    toFailure() {
        return new protocol_pb_1.Failure({
            code: this.code,
            message: this.message,
        });
    }
}
exports.RestateError = RestateError;
// Does not lead to Restate retries
// Leads to an output message with a failure defined
class TerminalError extends RestateError {
    constructor(message, options) {
        super(message, options);
    }
}
exports.TerminalError = TerminalError;
class TimeoutError extends TerminalError {
    constructor() {
        super("Timeout occurred", { errorCode: exports.TIMEOUT_ERROR_CODE });
    }
}
exports.TimeoutError = TimeoutError;
// Leads to Restate retries
class RetryableError extends RestateError {
    constructor(message, options) {
        super(message, options);
    }
    static internal(message) {
        return new RetryableError(message);
    }
    static journalMismatch(journalIndex, actualEntry, expectedEntry) {
        const msg = `Journal mismatch: Replayed journal entries did not correspond to the user code. The user code has to be deterministic!
        The journal entry at position ${journalIndex} was:
        - In the user code: type: ${expectedEntry.messageType}, message:${(0, utils_1.formatMessageAsJson)(expectedEntry.message)}
        - In the replayed messages: type: ${actualEntry.messageType}, message: ${(0, utils_1.formatMessageAsJson)(actualEntry.message)}`;
        return new RetryableError(msg, {
            errorCode: RestateErrorCodes.JOURNAL_MISMATCH,
        });
    }
    static protocolViolation(message) {
        return new RetryableError(message, {
            errorCode: RestateErrorCodes.PROTOCOL_VIOLATION,
        });
    }
    static apiViolation(message) {
        return new RetryableError(`API violation: ${message}`, {
            errorCode: exports.INTERNAL_ERROR_CODE,
        });
    }
}
exports.RetryableError = RetryableError;
function errorToFailure(err) {
    return err instanceof RestateError
        ? err.toFailure()
        : new protocol_pb_1.Failure({
            code: exports.INTERNAL_ERROR_CODE,
            message: err.message,
        });
}
exports.errorToFailure = errorToFailure;
function failureToTerminalError(failure) {
    return failureToError(failure, true);
}
exports.failureToTerminalError = failureToTerminalError;
function failureToError(failure, terminalError) {
    const errorMessage = failure.message ?? "(missing error message)";
    const errorCode = failure.code ?? exports.INTERNAL_ERROR_CODE;
    return terminalError
        ? new TerminalError(errorMessage, { errorCode })
        : new RestateError(errorMessage, { errorCode });
}
exports.failureToError = failureToError;
function errorToErrorMessage(err, additionalContext) {
    const code = err instanceof RestateError ? err.code : exports.INTERNAL_ERROR_CODE;
    const ty = additionalContext?.relatedEntryType;
    return new protocol_pb_1.ErrorMessage({
        code: code,
        message: err.message,
        relatedEntryName: additionalContext?.relatedEntryName,
        relatedEntryIndex: additionalContext?.relatedEntryIndex,
        relatedEntryType: ty !== undefined ? Number(ty) : undefined,
    });
}
exports.errorToErrorMessage = errorToErrorMessage;
//# sourceMappingURL=errors.js.map