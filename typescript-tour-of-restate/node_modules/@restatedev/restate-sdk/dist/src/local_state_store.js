"use strict";
/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStateStore = void 0;
const protocol_pb_1 = require("./generated/proto/protocol_pb");
const utils_1 = require("./utils/utils");
const node_buffer_1 = require("node:buffer");
class LocalStateStore {
    isPartial;
    state;
    constructor(isPartial, state) {
        this.isPartial = isPartial;
        this.state = new Map(state.map(({ key, value }) => [key.toString(), node_buffer_1.Buffer.from(value)]));
    }
    // Returns true if completed
    tryCompleteGet(key, msg) {
        const stateEntry = this.state.get(key);
        if (stateEntry === undefined) {
            if (this.isPartial) {
                // Partial eager state, so retrieve state from the runtime
                return false;
            }
            else {
                // Complete eager state, so state entry is null
                msg.result = { case: "empty", value: new protocol_pb_1.Empty({}) };
                return true;
            }
        }
        if (stateEntry instanceof node_buffer_1.Buffer) {
            msg.result = { case: "value", value: stateEntry };
        }
        else {
            msg.result = { case: "empty", value: new protocol_pb_1.Empty({}) };
        }
        return true;
    }
    // Returns true if completed
    tryCompletedGetStateKeys(msg) {
        if (this.isPartial) {
            return false;
        }
        msg.result = {
            case: "value",
            value: new protocol_pb_1.GetStateKeysEntryMessage_StateKeys({
                keys: Array.from(this.state.keys()).map((b) => node_buffer_1.Buffer.from(b)),
            }),
        };
        return true;
    }
    set(key, value) {
        const bytes = node_buffer_1.Buffer.from((0, utils_1.jsonSerialize)(value));
        this.state.set(key, bytes);
        return new protocol_pb_1.SetStateEntryMessage({
            key: node_buffer_1.Buffer.from(key, "utf8"),
            value: bytes,
        });
    }
    clear(key) {
        this.state.set(key, new protocol_pb_1.Empty());
        return new protocol_pb_1.ClearStateEntryMessage({ key: node_buffer_1.Buffer.from(key) });
    }
    // When a GetState request does not have a local entry and we have partial state,
    // then the request goes to the runtime.
    // When we get the response of the runtime, we add the state to the localStateStore.
    add(key, result) {
        this.state.set(key, result);
    }
    clearAll() {
        this.state.clear();
        this.isPartial = false;
        return new protocol_pb_1.ClearAllStateEntryMessage();
    }
}
exports.LocalStateStore = LocalStateStore;
//# sourceMappingURL=local_state_store.js.map