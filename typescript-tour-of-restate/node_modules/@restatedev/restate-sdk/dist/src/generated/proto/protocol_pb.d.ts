import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * Service protocol version.
 *
 * @generated from enum dev.restate.service.protocol.ServiceProtocolVersion
 */
export declare enum ServiceProtocolVersion {
    /**
     * @generated from enum value: SERVICE_PROTOCOL_VERSION_UNSPECIFIED = 0;
     */
    SERVICE_PROTOCOL_VERSION_UNSPECIFIED = 0,
    /**
     * initial service protocol version
     *
     * @generated from enum value: V1 = 1;
     */
    V1 = 1
}
/**
 * Type: 0x0000 + 0
 *
 * @generated from message dev.restate.service.protocol.StartMessage
 */
export declare class StartMessage extends Message<StartMessage> {
    /**
     * Unique id of the invocation. This id is unique across invocations and won't change when replaying the journal.
     *
     * @generated from field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * Invocation id that can be used for logging.
     * The user can use this id to address this invocation in admin and status introspection apis.
     *
     * @generated from field: string debug_id = 2;
     */
    debugId: string;
    /**
     * @generated from field: uint32 known_entries = 3;
     */
    knownEntries: number;
    /**
     * protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
     *
     * @generated from field: repeated dev.restate.service.protocol.StartMessage.StateEntry state_map = 4;
     */
    stateMap: StartMessage_StateEntry[];
    /**
     * @generated from field: bool partial_state = 5;
     */
    partialState: boolean;
    /**
     * If this invocation has a key associated (e.g. for objects and workflows), then this key is filled in. Empty otherwise.
     *
     * @generated from field: string key = 6;
     */
    key: string;
    constructor(data?: PartialMessage<StartMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.StartMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartMessage;
    static equals(a: StartMessage | PlainMessage<StartMessage> | undefined, b: StartMessage | PlainMessage<StartMessage> | undefined): boolean;
}
/**
 * @generated from message dev.restate.service.protocol.StartMessage.StateEntry
 */
export declare class StartMessage_StateEntry extends Message<StartMessage_StateEntry> {
    /**
     * @generated from field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * If value is an empty byte array,
     * then it means the value is empty and not "missing" (e.g. empty string).
     *
     * @generated from field: bytes value = 2;
     */
    value: Uint8Array;
    constructor(data?: PartialMessage<StartMessage_StateEntry>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.StartMessage.StateEntry";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartMessage_StateEntry;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartMessage_StateEntry;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartMessage_StateEntry;
    static equals(a: StartMessage_StateEntry | PlainMessage<StartMessage_StateEntry> | undefined, b: StartMessage_StateEntry | PlainMessage<StartMessage_StateEntry> | undefined): boolean;
}
/**
 * Type: 0x0000 + 1
 *
 * @generated from message dev.restate.service.protocol.CompletionMessage
 */
export declare class CompletionMessage extends Message<CompletionMessage> {
    /**
     * @generated from field: uint32 entry_index = 1;
     */
    entryIndex: number;
    /**
     * @generated from oneof dev.restate.service.protocol.CompletionMessage.result
     */
    result: {
        /**
         * @generated from field: dev.restate.service.protocol.Empty empty = 13;
         */
        value: Empty;
        case: "empty";
    } | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<CompletionMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.CompletionMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletionMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletionMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletionMessage;
    static equals(a: CompletionMessage | PlainMessage<CompletionMessage> | undefined, b: CompletionMessage | PlainMessage<CompletionMessage> | undefined): boolean;
}
/**
 * Type: 0x0000 + 2
 * Implementations MUST send this message when suspending an invocation.
 *
 * @generated from message dev.restate.service.protocol.SuspensionMessage
 */
export declare class SuspensionMessage extends Message<SuspensionMessage> {
    /**
     * This list represents any of the entry_index the invocation is waiting on to progress.
     * The runtime will resume the invocation as soon as one of the given entry_index is completed.
     * This list MUST not be empty.
     * False positive, entry_indexes is a valid plural of entry_indices.
     * https://learn.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/i/index-indexes-indices
     *
     * protolint:disable:this REPEATED_FIELD_NAMES_PLURALIZED
     *
     * @generated from field: repeated uint32 entry_indexes = 1;
     */
    entryIndexes: number[];
    constructor(data?: PartialMessage<SuspensionMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.SuspensionMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuspensionMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuspensionMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuspensionMessage;
    static equals(a: SuspensionMessage | PlainMessage<SuspensionMessage> | undefined, b: SuspensionMessage | PlainMessage<SuspensionMessage> | undefined): boolean;
}
/**
 * Type: 0x0000 + 3
 *
 * @generated from message dev.restate.service.protocol.ErrorMessage
 */
export declare class ErrorMessage extends Message<ErrorMessage> {
    /**
     * The code can be any HTTP status code, as described https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml.
     * In addition, we define the following error codes that MAY be used by the SDK for better error reporting:
     * * JOURNAL_MISMATCH = 570, that is when the SDK cannot replay a journal due to the mismatch between the journal and the actual code.
     * * PROTOCOL_VIOLATION = 571, that is when the SDK receives an unexpected message or an expected message variant, given its state.
     *
     * @generated from field: uint32 code = 1;
     */
    code: number;
    /**
     * Contains a concise error message, e.g. Throwable#getMessage() in Java.
     *
     * @generated from field: string message = 2;
     */
    message: string;
    /**
     * Contains a verbose error description, e.g. the exception stacktrace.
     *
     * @generated from field: string description = 3;
     */
    description: string;
    /**
     * Entry that caused the failure. This may be outside the current stored journal size.
     * If no specific entry caused the failure, the current replayed/processed entry can be used.
     *
     * @generated from field: optional uint32 related_entry_index = 4;
     */
    relatedEntryIndex?: number;
    /**
     * Name of the entry that caused the failure.
     *
     * @generated from field: optional string related_entry_name = 5;
     */
    relatedEntryName?: string;
    /**
     * Entry type.
     *
     * @generated from field: optional uint32 related_entry_type = 6;
     */
    relatedEntryType?: number;
    constructor(data?: PartialMessage<ErrorMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.ErrorMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorMessage;
    static equals(a: ErrorMessage | PlainMessage<ErrorMessage> | undefined, b: ErrorMessage | PlainMessage<ErrorMessage> | undefined): boolean;
}
/**
 * Type: 0x0000 + 4
 *
 * @generated from message dev.restate.service.protocol.EntryAckMessage
 */
export declare class EntryAckMessage extends Message<EntryAckMessage> {
    /**
     * @generated from field: uint32 entry_index = 1;
     */
    entryIndex: number;
    constructor(data?: PartialMessage<EntryAckMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.EntryAckMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntryAckMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntryAckMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntryAckMessage;
    static equals(a: EntryAckMessage | PlainMessage<EntryAckMessage> | undefined, b: EntryAckMessage | PlainMessage<EntryAckMessage> | undefined): boolean;
}
/**
 * Type: 0x0000 + 5
 * Implementations MUST send this message when the invocation lifecycle ends.
 *
 * @generated from message dev.restate.service.protocol.EndMessage
 */
export declare class EndMessage extends Message<EndMessage> {
    constructor(data?: PartialMessage<EndMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.EndMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndMessage;
    static equals(a: EndMessage | PlainMessage<EndMessage> | undefined, b: EndMessage | PlainMessage<EndMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: No
 * Type: 0x0400 + 0
 *
 * @generated from message dev.restate.service.protocol.InputEntryMessage
 */
export declare class InputEntryMessage extends Message<InputEntryMessage> {
    /**
     * @generated from field: repeated dev.restate.service.protocol.Header headers = 1;
     */
    headers: Header[];
    /**
     * @generated from field: bytes value = 14;
     */
    value: Uint8Array;
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<InputEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.InputEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputEntryMessage;
    static equals(a: InputEntryMessage | PlainMessage<InputEntryMessage> | undefined, b: InputEntryMessage | PlainMessage<InputEntryMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: No
 * Type: 0x0400 + 1
 *
 * @generated from message dev.restate.service.protocol.OutputEntryMessage
 */
export declare class OutputEntryMessage extends Message<OutputEntryMessage> {
    /**
     * @generated from oneof dev.restate.service.protocol.OutputEntryMessage.result
     */
    result: {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<OutputEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.OutputEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutputEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutputEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutputEntryMessage;
    static equals(a: OutputEntryMessage | PlainMessage<OutputEntryMessage> | undefined, b: OutputEntryMessage | PlainMessage<OutputEntryMessage> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: No
 * Type: 0x0800 + 0
 *
 * @generated from message dev.restate.service.protocol.GetStateEntryMessage
 */
export declare class GetStateEntryMessage extends Message<GetStateEntryMessage> {
    /**
     * @generated from field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from oneof dev.restate.service.protocol.GetStateEntryMessage.result
     */
    result: {
        /**
         * @generated from field: dev.restate.service.protocol.Empty empty = 13;
         */
        value: Empty;
        case: "empty";
    } | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<GetStateEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.GetStateEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStateEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStateEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStateEntryMessage;
    static equals(a: GetStateEntryMessage | PlainMessage<GetStateEntryMessage> | undefined, b: GetStateEntryMessage | PlainMessage<GetStateEntryMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: No
 * Type: 0x0800 + 1
 *
 * @generated from message dev.restate.service.protocol.SetStateEntryMessage
 */
export declare class SetStateEntryMessage extends Message<SetStateEntryMessage> {
    /**
     * @generated from field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from field: bytes value = 3;
     */
    value: Uint8Array;
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<SetStateEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.SetStateEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetStateEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetStateEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetStateEntryMessage;
    static equals(a: SetStateEntryMessage | PlainMessage<SetStateEntryMessage> | undefined, b: SetStateEntryMessage | PlainMessage<SetStateEntryMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: No
 * Type: 0x0800 + 2
 *
 * @generated from message dev.restate.service.protocol.ClearStateEntryMessage
 */
export declare class ClearStateEntryMessage extends Message<ClearStateEntryMessage> {
    /**
     * @generated from field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<ClearStateEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.ClearStateEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearStateEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearStateEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearStateEntryMessage;
    static equals(a: ClearStateEntryMessage | PlainMessage<ClearStateEntryMessage> | undefined, b: ClearStateEntryMessage | PlainMessage<ClearStateEntryMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: No
 * Type: 0x0800 + 3
 *
 * @generated from message dev.restate.service.protocol.ClearAllStateEntryMessage
 */
export declare class ClearAllStateEntryMessage extends Message<ClearAllStateEntryMessage> {
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<ClearAllStateEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.ClearAllStateEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearAllStateEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearAllStateEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearAllStateEntryMessage;
    static equals(a: ClearAllStateEntryMessage | PlainMessage<ClearAllStateEntryMessage> | undefined, b: ClearAllStateEntryMessage | PlainMessage<ClearAllStateEntryMessage> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: No
 * Type: 0x0800 + 4
 *
 * @generated from message dev.restate.service.protocol.GetStateKeysEntryMessage
 */
export declare class GetStateKeysEntryMessage extends Message<GetStateKeysEntryMessage> {
    /**
     * @generated from oneof dev.restate.service.protocol.GetStateKeysEntryMessage.result
     */
    result: {
        /**
         * @generated from field: dev.restate.service.protocol.GetStateKeysEntryMessage.StateKeys value = 14;
         */
        value: GetStateKeysEntryMessage_StateKeys;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<GetStateKeysEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.GetStateKeysEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStateKeysEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStateKeysEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStateKeysEntryMessage;
    static equals(a: GetStateKeysEntryMessage | PlainMessage<GetStateKeysEntryMessage> | undefined, b: GetStateKeysEntryMessage | PlainMessage<GetStateKeysEntryMessage> | undefined): boolean;
}
/**
 * @generated from message dev.restate.service.protocol.GetStateKeysEntryMessage.StateKeys
 */
export declare class GetStateKeysEntryMessage_StateKeys extends Message<GetStateKeysEntryMessage_StateKeys> {
    /**
     * @generated from field: repeated bytes keys = 1;
     */
    keys: Uint8Array[];
    constructor(data?: PartialMessage<GetStateKeysEntryMessage_StateKeys>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.GetStateKeysEntryMessage.StateKeys";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStateKeysEntryMessage_StateKeys;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStateKeysEntryMessage_StateKeys;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStateKeysEntryMessage_StateKeys;
    static equals(a: GetStateKeysEntryMessage_StateKeys | PlainMessage<GetStateKeysEntryMessage_StateKeys> | undefined, b: GetStateKeysEntryMessage_StateKeys | PlainMessage<GetStateKeysEntryMessage_StateKeys> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: No
 * Type: 0x0800 + 8
 *
 * @generated from message dev.restate.service.protocol.GetPromiseEntryMessage
 */
export declare class GetPromiseEntryMessage extends Message<GetPromiseEntryMessage> {
    /**
     * @generated from field: string key = 1;
     */
    key: string;
    /**
     * @generated from oneof dev.restate.service.protocol.GetPromiseEntryMessage.result
     */
    result: {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<GetPromiseEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.GetPromiseEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPromiseEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPromiseEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPromiseEntryMessage;
    static equals(a: GetPromiseEntryMessage | PlainMessage<GetPromiseEntryMessage> | undefined, b: GetPromiseEntryMessage | PlainMessage<GetPromiseEntryMessage> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: No
 * Type: 0x0800 + 9
 *
 * @generated from message dev.restate.service.protocol.PeekPromiseEntryMessage
 */
export declare class PeekPromiseEntryMessage extends Message<PeekPromiseEntryMessage> {
    /**
     * @generated from field: string key = 1;
     */
    key: string;
    /**
     * @generated from oneof dev.restate.service.protocol.PeekPromiseEntryMessage.result
     */
    result: {
        /**
         * @generated from field: dev.restate.service.protocol.Empty empty = 13;
         */
        value: Empty;
        case: "empty";
    } | {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<PeekPromiseEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.PeekPromiseEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeekPromiseEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeekPromiseEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeekPromiseEntryMessage;
    static equals(a: PeekPromiseEntryMessage | PlainMessage<PeekPromiseEntryMessage> | undefined, b: PeekPromiseEntryMessage | PlainMessage<PeekPromiseEntryMessage> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: No
 * Type: 0x0800 + A
 *
 * @generated from message dev.restate.service.protocol.CompletePromiseEntryMessage
 */
export declare class CompletePromiseEntryMessage extends Message<CompletePromiseEntryMessage> {
    /**
     * @generated from field: string key = 1;
     */
    key: string;
    /**
     * The value to use to complete the promise
     *
     * @generated from oneof dev.restate.service.protocol.CompletePromiseEntryMessage.completion
     */
    completion: {
        /**
         * @generated from field: bytes completion_value = 2;
         */
        value: Uint8Array;
        case: "completionValue";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure completion_failure = 3;
         */
        value: Failure;
        case: "completionFailure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * @generated from oneof dev.restate.service.protocol.CompletePromiseEntryMessage.result
     */
    result: {
        /**
         * Returns empty if value was set successfully
         *
         * @generated from field: dev.restate.service.protocol.Empty empty = 13;
         */
        value: Empty;
        case: "empty";
    } | {
        /**
         * Returns a failure if the promise was already completed
         *
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<CompletePromiseEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.CompletePromiseEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletePromiseEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletePromiseEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletePromiseEntryMessage;
    static equals(a: CompletePromiseEntryMessage | PlainMessage<CompletePromiseEntryMessage> | undefined, b: CompletePromiseEntryMessage | PlainMessage<CompletePromiseEntryMessage> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: No
 * Type: 0x0C00 + 0
 *
 * @generated from message dev.restate.service.protocol.SleepEntryMessage
 */
export declare class SleepEntryMessage extends Message<SleepEntryMessage> {
    /**
     * Wake up time.
     * The time is set as duration since UNIX Epoch.
     *
     * @generated from field: uint64 wake_up_time = 1;
     */
    wakeUpTime: bigint;
    /**
     * @generated from oneof dev.restate.service.protocol.SleepEntryMessage.result
     */
    result: {
        /**
         * @generated from field: dev.restate.service.protocol.Empty empty = 13;
         */
        value: Empty;
        case: "empty";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<SleepEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.SleepEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SleepEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SleepEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SleepEntryMessage;
    static equals(a: SleepEntryMessage | PlainMessage<SleepEntryMessage> | undefined, b: SleepEntryMessage | PlainMessage<SleepEntryMessage> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: Yes
 * Type: 0x0C00 + 1
 *
 * @generated from message dev.restate.service.protocol.CallEntryMessage
 */
export declare class CallEntryMessage extends Message<CallEntryMessage> {
    /**
     * @generated from field: string service_name = 1;
     */
    serviceName: string;
    /**
     * @generated from field: string handler_name = 2;
     */
    handlerName: string;
    /**
     * @generated from field: bytes parameter = 3;
     */
    parameter: Uint8Array;
    /**
     * @generated from field: repeated dev.restate.service.protocol.Header headers = 4;
     */
    headers: Header[];
    /**
     * If this invocation has a key associated (e.g. for objects and workflows), then this key is filled in. Empty otherwise.
     *
     * @generated from field: string key = 5;
     */
    key: string;
    /**
     * @generated from oneof dev.restate.service.protocol.CallEntryMessage.result
     */
    result: {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<CallEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.CallEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallEntryMessage;
    static equals(a: CallEntryMessage | PlainMessage<CallEntryMessage> | undefined, b: CallEntryMessage | PlainMessage<CallEntryMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: Yes
 * Type: 0x0C00 + 2
 *
 * @generated from message dev.restate.service.protocol.OneWayCallEntryMessage
 */
export declare class OneWayCallEntryMessage extends Message<OneWayCallEntryMessage> {
    /**
     * @generated from field: string service_name = 1;
     */
    serviceName: string;
    /**
     * @generated from field: string handler_name = 2;
     */
    handlerName: string;
    /**
     * @generated from field: bytes parameter = 3;
     */
    parameter: Uint8Array;
    /**
     * Time when this BackgroundInvoke should be executed.
     * The time is set as duration since UNIX Epoch.
     * If this value is not set, equal to 0, or past in time,
     * the runtime will execute this BackgroundInvoke as soon as possible.
     *
     * @generated from field: uint64 invoke_time = 4;
     */
    invokeTime: bigint;
    /**
     * @generated from field: repeated dev.restate.service.protocol.Header headers = 5;
     */
    headers: Header[];
    /**
     * If this invocation has a key associated (e.g. for objects and workflows), then this key is filled in. Empty otherwise.
     *
     * @generated from field: string key = 6;
     */
    key: string;
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<OneWayCallEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.OneWayCallEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneWayCallEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneWayCallEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneWayCallEntryMessage;
    static equals(a: OneWayCallEntryMessage | PlainMessage<OneWayCallEntryMessage> | undefined, b: OneWayCallEntryMessage | PlainMessage<OneWayCallEntryMessage> | undefined): boolean;
}
/**
 * Completable: Yes
 * Fallible: No
 * Type: 0x0C00 + 3
 * Awakeables are addressed by an identifier exposed to the user. See the spec for more details.
 *
 * @generated from message dev.restate.service.protocol.AwakeableEntryMessage
 */
export declare class AwakeableEntryMessage extends Message<AwakeableEntryMessage> {
    /**
     * @generated from oneof dev.restate.service.protocol.AwakeableEntryMessage.result
     */
    result: {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<AwakeableEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.AwakeableEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwakeableEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwakeableEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwakeableEntryMessage;
    static equals(a: AwakeableEntryMessage | PlainMessage<AwakeableEntryMessage> | undefined, b: AwakeableEntryMessage | PlainMessage<AwakeableEntryMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: Yes
 * Type: 0x0C00 + 4
 *
 * @generated from message dev.restate.service.protocol.CompleteAwakeableEntryMessage
 */
export declare class CompleteAwakeableEntryMessage extends Message<CompleteAwakeableEntryMessage> {
    /**
     * Identifier of the awakeable. See the spec for more details.
     *
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * @generated from oneof dev.restate.service.protocol.CompleteAwakeableEntryMessage.result
     */
    result: {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<CompleteAwakeableEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.CompleteAwakeableEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompleteAwakeableEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompleteAwakeableEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompleteAwakeableEntryMessage;
    static equals(a: CompleteAwakeableEntryMessage | PlainMessage<CompleteAwakeableEntryMessage> | undefined, b: CompleteAwakeableEntryMessage | PlainMessage<CompleteAwakeableEntryMessage> | undefined): boolean;
}
/**
 * Completable: No
 * Fallible: No
 * Type: 0x0C00 + 5
 * Flag: RequiresRuntimeAck
 *
 * @generated from message dev.restate.service.protocol.RunEntryMessage
 */
export declare class RunEntryMessage extends Message<RunEntryMessage> {
    /**
     * @generated from oneof dev.restate.service.protocol.RunEntryMessage.result
     */
    result: {
        /**
         * @generated from field: bytes value = 14;
         */
        value: Uint8Array;
        case: "value";
    } | {
        /**
         * @generated from field: dev.restate.service.protocol.Failure failure = 15;
         */
        value: Failure;
        case: "failure";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Entry name
     *
     * @generated from field: string name = 12;
     */
    name: string;
    constructor(data?: PartialMessage<RunEntryMessage>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.RunEntryMessage";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunEntryMessage;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunEntryMessage;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunEntryMessage;
    static equals(a: RunEntryMessage | PlainMessage<RunEntryMessage> | undefined, b: RunEntryMessage | PlainMessage<RunEntryMessage> | undefined): boolean;
}
/**
 * This failure object carries user visible errors,
 * e.g. invocation failure return value or failure result of an InvokeEntryMessage.
 *
 * @generated from message dev.restate.service.protocol.Failure
 */
export declare class Failure extends Message<Failure> {
    /**
     * The code can be any HTTP status code, as described https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml.
     *
     * @generated from field: uint32 code = 1;
     */
    code: number;
    /**
     * Contains a concise error message, e.g. Throwable#getMessage() in Java.
     *
     * @generated from field: string message = 2;
     */
    message: string;
    constructor(data?: PartialMessage<Failure>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.Failure";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Failure;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Failure;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Failure;
    static equals(a: Failure | PlainMessage<Failure> | undefined, b: Failure | PlainMessage<Failure> | undefined): boolean;
}
/**
 * @generated from message dev.restate.service.protocol.Header
 */
export declare class Header extends Message<Header> {
    /**
     * @generated from field: string key = 1;
     */
    key: string;
    /**
     * @generated from field: string value = 2;
     */
    value: string;
    constructor(data?: PartialMessage<Header>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.Header";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Header;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Header;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Header;
    static equals(a: Header | PlainMessage<Header> | undefined, b: Header | PlainMessage<Header> | undefined): boolean;
}
/**
 * @generated from message dev.restate.service.protocol.Empty
 */
export declare class Empty extends Message<Empty> {
    constructor(data?: PartialMessage<Empty>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "dev.restate.service.protocol.Empty";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty;
    static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean;
}
//# sourceMappingURL=protocol_pb.d.ts.map