"use strict";
/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStateMachineConsole = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */
const protocol_1 = require("../types/protocol");
const utils_1 = require("./utils");
const logger_1 = require("../logger");
/**
 * The environment variable which is read to determine the debug log settings.
 */
const RESTATE_JOURNAL_LOGGING = "RESTATE_JOURNAL_LOGGING";
/**
 * The values for the {@link RESTATE_JOURNAL_LOGGING} variable.
 */
var JournalLoggingLogLevel;
(function (JournalLoggingLogLevel) {
    /** No debug logging at all. Good for performance and avoid per-invocation log volume */
    JournalLoggingLogLevel[JournalLoggingLogLevel["OFF"] = 0] = "OFF";
    /** Logs debug information for every Restate effect (=journal event) inside an invocation,
     *  like RPC, state access, sideEffect, ... */
    JournalLoggingLogLevel[JournalLoggingLogLevel["DEBUG"] = 1] = "DEBUG";
    /** Logs debug information for every Restate effect (=journal event) inside an invocation,
     *  like RPC, state access, sideEffect, ... Additionally, this adds a JSON representation
     *  of the journal message to the log. */
    JournalLoggingLogLevel[JournalLoggingLogLevel["TRACE"] = 2] = "TRACE";
})(JournalLoggingLogLevel || (JournalLoggingLogLevel = {}));
const DEFAULT_DEBUG_LOG_LEVEL = globalThis?.process?.env["NODE_ENV"]?.toUpperCase() === "PRODUCTION" ||
    logger_1.RESTATE_LOG_LEVEL > logger_1.RestateLogLevel.DEBUG
    ? JournalLoggingLogLevel.OFF
    : JournalLoggingLogLevel.DEBUG;
function readLogLevel() {
    const env = globalThis?.process?.env[RESTATE_JOURNAL_LOGGING]?.toUpperCase();
    if (env == undefined) {
        return DEFAULT_DEBUG_LOG_LEVEL;
    }
    const idx = Object.keys(JournalLoggingLogLevel)
        .filter((t) => 
    // Object.keys contains the numbers as well
    // https://stackoverflow.com/questions/48768774/how-to-get-all-the-values-of-an-enum-with-typescript
    isNaN(Number(t)))
        .findIndex((level) => level == env);
    if (idx < 0) {
        return DEFAULT_DEBUG_LOG_LEVEL;
    }
    return idx;
}
const log_level = readLogLevel();
function createStateMachineConsole(context) {
    const console = (0, logger_1.createRestateConsole)(context);
    Object.defineProperties(console, {
        debugJournalMessage: {
            value: (logMessage, messageType, message) => {
                if (log_level >= JournalLoggingLogLevel.DEBUG) {
                    const type = messageType !== undefined
                        ? " ; " + (0, protocol_1.formatMessageType)(messageType)
                        : "";
                    const journalEvent = log_level >= JournalLoggingLogLevel.TRACE && message !== undefined
                        ? " : " + (0, utils_1.formatMessageAsJson)(message)
                        : "";
                    console.debug(`${logMessage}${type}${journalEvent}`);
                }
            },
        },
    });
    return console;
}
exports.createStateMachineConsole = createStateMachineConsole;
//# sourceMappingURL=message_logger.js.map