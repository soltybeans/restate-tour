"use strict";
/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WRAPPED_PROMISE_PENDING = exports.PROMISE_PENDING = exports.CompletablePromise = exports.wrapDeeply = void 0;
function wrapDeeply(promise, onThen) {
    // We need this to support nesting of WrappedPromise
    let transform;
    if (Object.hasOwn(promise, "transform")) {
        const wrappedPromise = promise;
        transform = (onfulfilled, onrejected) => wrapDeeply(wrappedPromise.transform(onfulfilled, onrejected), onThen);
    }
    else {
        transform = (onfulfilled, onrejected) => wrapDeeply(promise.then(onfulfilled, onrejected), onThen);
    }
    /* eslint-disable @typescript-eslint/no-explicit-any */
    return {
        transform,
        then: function (onfulfilled, onrejected) {
            if (onThen !== undefined) {
                onThen();
            }
            return promise.then(onfulfilled, onrejected);
        },
        catch: function (onrejected) {
            return wrapDeeply(promise.catch(onrejected), onThen);
        },
        finally: function (onfinally) {
            return wrapDeeply(promise.finally(onfinally), onThen);
        },
        [Symbol.toStringTag]: "",
    };
}
exports.wrapDeeply = wrapDeeply;
// Like https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers
// (not yet available in node)
class CompletablePromise {
    success;
    failure;
    promise;
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.success = resolve;
            this.failure = reject;
        });
    }
    resolve(value) {
        this.success(value);
    }
    reject(reason) {
        this.failure(reason);
    }
}
exports.CompletablePromise = CompletablePromise;
// A promise that is never completed
// eslint-disable-next-line @typescript-eslint/no-empty-function
exports.PROMISE_PENDING = new Promise(() => { });
exports.WRAPPED_PROMISE_PENDING = wrapDeeply(exports.PROMISE_PENDING);
//# sourceMappingURL=promises.js.map