/// <reference types="node" />
import { Message } from "./types/types";
import { RestateStreamConsumer } from "./connection/connection";
import { LocalStateStore } from "./local_state_store";
import { LoggerContext } from "./logger";
import { ComponentHandler } from "./types/components";
import { Buffer } from "node:buffer";
export declare class InvocationBuilder implements RestateStreamConsumer {
    private readonly component;
    private readonly complete;
    private state;
    private runtimeReplayIndex;
    private replayEntries;
    private id?;
    private debugId?;
    private invocationValue?;
    private nbEntriesToReplay?;
    private localStateStore?;
    private userKey?;
    private invocationHeaders?;
    constructor(component: ComponentHandler);
    handleMessage(m: Message): boolean;
    private handlePollInputStreamEntry;
    handleStreamError(e: Error): void;
    handleInputClosed(): void;
    completion(): Promise<void>;
    private handleStartMessage;
    private addReplayEntry;
    private incrementRuntimeReplayIndex;
    isComplete(): boolean;
    build(): Invocation;
}
export declare class Invocation {
    readonly handler: ComponentHandler;
    readonly id: Buffer;
    readonly debugId: string;
    readonly nbEntriesToReplay: number;
    readonly replayEntries: Map<number, Message>;
    readonly invocationValue: Buffer;
    readonly invocationHeaders: ReadonlyMap<string, string>;
    readonly localStateStore: LocalStateStore;
    readonly userKey?: string | undefined;
    constructor(handler: ComponentHandler, id: Buffer, debugId: string, nbEntriesToReplay: number, replayEntries: Map<number, Message>, invocationValue: Buffer, invocationHeaders: ReadonlyMap<string, string>, localStateStore: LocalStateStore, userKey?: string | undefined);
    inferLoggerContext(additionalContext?: {
        [name: string]: string;
    }): LoggerContext;
}
//# sourceMappingURL=invocation.d.ts.map